#include <stdio.h>
#include <conio.h>
#include <string.h>

struct Video
{
	char CompanyName[20];
	int ReleaseYear;
	char CardName[8];
	int NumberModel;
};

int Menu(int);
int ScanArray(struct Video[20]);
void PrintArray(int, struct Video[20]);
int AddInfo(int, struct Video[20]);
int DeleteInfo(int, struct Video[20]);
void DeleteLine(int *, struct Video[20], int *);
void SaveDB(int, struct Video[20]);
void OpenDB(int *, struct Video[20]);
void SearchInfo(struct Video[20], int);
void DisplayLine(struct Video[20], int, int *);
void SortInfo(struct Video[20], int);
void BubbleSort(struct Video[20], int);

void main(void){
	int N, line = 0;
	struct Video VideoCard[20];
	while(N = Menu(line))
		switch(N)
		{
			case '0':
				exit(1);
			case '1':
				line = ScanArray(VideoCard);
				break;
			case '2':
			{	if(line == 0)
					break;
				PrintArray(line, VideoCard);
			}
				break;
			case '3':
				line = AddInfo(line, VideoCard);
				break;
			case '4':
        	{	if(line == 0)
					break;
				line = DeleteInfo(line, VideoCard);
			}      
				break;
			case '5':
            {	if(line == 0)
					break;
				SaveDB(line, VideoCard);
			}
				break;
			case '6':
				OpenDB(&line, VideoCard);
				break;
			case '7':
			{	if(line == 0)
					break;
				SearchInfo(VideoCard, line);
			}
				break;
			case '8':
        	{	if(line == 0)
					break;
				SortInfo(VideoCard, line);
			}
				break;
		}
}

int Menu(int line){
	int N = 0;
	system("cls");
	if(line == 0)
    	printf("--------MENU-------\n"
			   "[1]SCAN_INFO    [1]\n"
			   "[3]ADD_STRING   [3]\n"
			   "[6]OPEN_FROM_DB [6]\n"
			   "[0]     EXIT    [0]\n"
			   ">");
	else
		printf("--------MENU-------\n"
			   "[1]SCAN_INFO    [1]\n"
			   "[2]PRINT_INFO   [2]\n"
			   "[3]ADD_STRING   [3]\n"
			   "[4]DELETE_STRING[4]\n"
			   "[5]SAVE_IN_DB   [5]\n"
			   "[6]OPEN_FROM_DB [6]\n"
			   "[7]SEARCH       [7]\n"
			   "[8]SORT         [8]\n"
			   "[0]     EXIT    [0]\n"
			   ">");
	N = getch();
	return N;
}
int ScanArray(struct Video VideoCard[20]){
	int i, line = 1;
	system("cls");
	printf("->[1]SCAN_INFO\n"
		   "  [0]EXIT\n");
	printf("NUMBER OF ELEMENTS (1...20) = ");

	while((scanf("%d",&line)) != 1 ) {
		printf("Data entry incorrect. Try again:\n");
		while(getchar() != '\n')
			  ;
	}

	if(line == 0)
    	main();
	for(i = 0; i < line; i++)
	{
		printf("\nVIDEO_CARD[%d]\n", i+1);
		printf("Company Name: ");
		while((scanf("%20s",&VideoCard[i].CompanyName)) != 1 )
			printf("Data entry incorrect. Try again:\n");

		printf("Release Year: ");
		while((scanf("%d",&VideoCard[i].ReleaseYear)) != 1 )
			printf("Data entry incorrect. Try again:\n");

		printf("Card Name:    ");
		while((scanf("%8s",&VideoCard[i].CardName)) != 1 )
		printf("Data entry incorrect. Try again:\n");

		printf("Number Model: ");
		while((scanf("%d",&VideoCard[i].NumberModel)) != 1 )
			printf("Data entry incorrect. Try again:\n");
	}
	return line;
}
void PrintArray(int line, struct Video VideoCard[20]){
	int i;
	system("cls");
	printf("->[2]PRINT_INFO\n"
		   "  [ANY]EXIT\n"
		   "\n──────────────────────────────────────────────────\n"
		   "| N |CompanyName|ReleaseYear|CardName|NumberModel|\n"
		   "────┴───────────┴───────────┴────────┴────────────\n");

	for(i = 0; i < line; i++)
	{
		printf("|%3d|%11s|%-11d|%-8s|%11d|\n", i+1, VideoCard[i].CompanyName, VideoCard[i].ReleaseYear, VideoCard[i].CardName, VideoCard[i].NumberModel);
        printf("────┴───────────┴───────────┴────────┴────────────\n");
	}
	getch();
}
int AddInfo(int line, struct Video VideoCard[20]){
	system("cls");
	printf("->[3]ADD_STRING\n"
	       "\nVIDEO_CARD[%d]\n", line+1);
	printf("Company Name: ");
	while((scanf("%20s",&VideoCard[line].CompanyName)) != 1 )
		printf("Data entry incorrect. Try again:\n");

	printf("Release Year: ");
	while((scanf("%d",&VideoCard[line].ReleaseYear)) != 1 )
		printf("Data entry incorrect. Try again:\n");

	printf("Card Name:    ");
	while((scanf("%8s",&VideoCard[line].CardName)) != 1 )
		printf("Data entry incorrect. Try again:\n");

	printf("Number Model: ");
	while((scanf("%d",&VideoCard[line].NumberModel)) != 1 )
		printf("Data entry incorrect. Try again:\n");
	line++;
	return line;
}
int DeleteInfo(int line, struct Video VideoCard[20])
{
	int point, i, KeyInt, strings = 0;
	char KeyWord[20];
	system("cls");
	printf("->[4]DELETE_STRING\n"
		   "  [0]EXIT\n"
		   "\nSELECT_A_CATEGORY\n"
		   "[1]Company Name\n"
		   "[2]Release Year\n"
		   "[3]Card Name\n"
		   "[4]Number Model\n"
		   "[5]Number String\n"
		   ">");
	point = getch();
	system("cls");
		switch(point){
			case '0':
					Menu(line);
				break;
			case '1':
				{
				printf("->[4]DELETE_STRING\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				while((scanf("%19s", KeyWord)) != 1 )
					printf("Data entry incorrect. Try again:\n");
				if(strcmp(KeyWord, "0") == 0)
					DeleteInfo(line, VideoCard);
				printf("Number of deleted strings: ");
				for(i = 0 ; i < line; i++)
					if(strcmp(VideoCard[i].CompanyName, KeyWord) == 0)
					{
						DeleteLine(&line, VideoCard, &i);
						strings++;
					}
				}
				break;
			case '2':
				{
				printf("->[4]DELETE_STRING\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				while((scanf("%d", &KeyInt)) != 1 )
					printf("Data entry incorrect. Try again:\n");
            	if(KeyInt == 0)
					DeleteInfo(line, VideoCard);
				printf("Number of deleted strings: ");
				for(i = 0 ; i < line; i++)
					if(VideoCard[i].ReleaseYear == KeyInt)
					{
						DeleteLine(&line, VideoCard, &i);
						strings++;
                	}
				}
				break;
			case '3':
				{
				printf("->[4]DELETE_STRING\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				while((scanf("%7s", KeyWord)) != 1 )
					printf("Data entry incorrect. Try again:\n");
				if(strcmp(KeyWord, "0") == 0)
					DeleteInfo(line, VideoCard);
				printf("Deleted lines: ");
				for(i = 0 ; i < line; i++)
					if(strcmp(VideoCard[i].CardName, KeyWord) == 0)
					{
						DeleteLine(&line, VideoCard, &i);
						strings++;
					}
				}
				break;
			case '4':
				{
				printf("->[4]DELETE_STRING\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				while((scanf("%d", &KeyInt)) != 1 )
					printf("Data entry incorrect. Try again:\n");
            	if(KeyInt == 0)
					DeleteInfo(line, VideoCard);
				printf("Deleted lines: ");
				for(i = 0 ; i < line; i++)
					if(VideoCard[i].NumberModel == KeyInt)
					{
						DeleteLine(&line, VideoCard, &i);
						strings++;
					}
				}
				break;
			case '5':
				{
				printf("->[4]DELETE_STRING\n"
					   "  [0]EXIT\n"
				       "Enter number of string: ");
				RepeatKeyInt:
				while((scanf("%d", &KeyInt)) != 1)
						printf("Data entry incorrect. Try again:\n");
				if(KeyInt > line)
				{
                    printf("String with this number does not exist. Try again: ");
					goto RepeatKeyInt;
				}
				if(KeyInt == 0)
					DeleteInfo(line, VideoCard);
				printf("\nDeleted lines: ");
				--KeyInt;
				DeleteLine(&line, VideoCard, &KeyInt);
				strings++;
				}
				break;
		}
	printf("%d\n", strings);
	getch();
	return line;
}

void DeleteLine(int *line, struct Video VideoCard[20], int *i){
	for(; *i < *line; *i += 1)
	{
	strcpy(VideoCard[*i].CompanyName, VideoCard[*i+1].CompanyName);
	VideoCard[*i].ReleaseYear = VideoCard[*i+1].ReleaseYear;
	strcpy(VideoCard[*i].CardName, VideoCard[*i+1].CardName);
	VideoCard[*i].NumberModel = VideoCard[*i+1].NumberModel;
	}
	*line -= 1;
	*i = -1;
}

void SaveDB(int line, struct Video VideoCard[20])
{
  FILE *F;
  int i;

  if ((F = fopen("DBVideoCards.dat", "wb")) == NULL)
  {
	printf("Unable to open file for writing 'DBVideoCards.dat'\n");
	return;
  }

  for (i = 0; i < line; i++)
	fwrite(VideoCard+i, sizeof(struct Video), 1, F);

  fclose(F);
  printf("SUCCESS_SAVING");
  getch();
}

void OpenDB(int *line, struct Video VideoCard[20])
{
  FILE *F;
  int i, lSize, dblines;

  if ((F = fopen("DBVideoCards.dat", "rb")) == NULL)
  {
	printf("Unable to open file for reading 'DBVideoCards.dat'\n");
	return;
  }
  fseek(F, 0, SEEK_END);
  lSize = ftell(F);
  *line = lSize / sizeof(struct Video);
  rewind(F);


  for (i = 0; i < line; i++)
	fread(VideoCard+i, sizeof(struct Video), 1, F);

  fclose(F);
  dblines = *line;
  PrintArray(dblines, VideoCard);
}

void SearchInfo(struct Video VideoCard[20], int line){
	int point, i, KeyInt, coincidence = 0, k = 0;
	char KeyWord[20];
	system("cls");
	printf("->[7]SEARCH\n"
		   "  [0]EXIT\n"
		   "\nSELECT_A_CATEGORY\n"
		   "[1]Company Name\n"
		   "[2]Release Year\n"
		   "[3]Card Name\n"
		   "[4]Number Model\n"
		   "[5]Number String\n"
		   ">");
	point = getch();
	system("cls");
		switch(point){
			case '0':
					Menu(line);
				break;
			case '1':
				{
				printf("->[7]SEARCH\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				while((scanf("%19s", KeyWord)) != 1 )
					printf("Data entry incorrect. Try again:\n");
				if(strcmp(KeyWord, "0") == 0)
					SearchInfo(VideoCard, line);
				for(i = 0 ; i < line; i++)
					if(strcmp(VideoCard[i].CompanyName, KeyWord) == 0)
					{
						DisplayLine(VideoCard, i, &k);
						coincidence = 1;
					}
				}
				break;
			case '2':
				{
				printf("->[7]SEARCH\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				while((scanf("%d", &KeyInt)) != 1 )
					printf("Data entry incorrect. Try again:\n");
				if(KeyInt == 0)
					SearchInfo(VideoCard, line);
				for(i = 0 ; i < line; i++)
					if(VideoCard[i].ReleaseYear == KeyInt)
					{
						DisplayLine(VideoCard, i, &k);
						coincidence = 1;
					}
				}
				break;
			case '3':
				{
				printf("->[7]SEARCH\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				while((scanf("%7s", KeyWord)) != 1 )
					printf("Data entry incorrect. Try again:\n");
				if(strcmp(KeyWord, "0") == 0)
					SearchInfo(VideoCard, line);
				for(i = 0 ; i < line; i++)
					if(strcmp(VideoCard[i].CardName, KeyWord) == 0)
					{
						DisplayLine(VideoCard, i, &k);
						coincidence = 1;
					}
				}
				break;
			case '4':
				{
				printf("->[7]SEARCH\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				while((scanf("%d", &KeyInt)) != 1 )
					printf("Data entry incorrect. Try again:\n");
				if(KeyInt == 0)
					SearchInfo(VideoCard, line);
				for(i = 0 ; i < line; i++)
					if(VideoCard[i].NumberModel == KeyInt)
					{
						DisplayLine(VideoCard, i, &k);
						coincidence = 1;
					}
				}
				break;
			case '5':
				{
				printf("->[7]SEARCH\n"
					   "  [0]EXIT\n"
					   "Enter keyword: ");
				RepeatKeyInt:
					while((scanf("%d", &KeyInt)) != 1 )
						printf("Data entry incorrect. Try again:\n");
				if(KeyInt > line)
				{
                    printf("String with this number does not exist. Try again: ");
					goto RepeatKeyInt;
				}
				if(KeyInt == 0)
					SearchInfo(VideoCard, line);
				--KeyInt;
				DisplayLine(VideoCard, KeyInt, &k);
				}
				break;
		}
	if (coincidence == 0)
	{
		printf("NO_MATCHES_FOUND\n");
		getch();
		SearchInfo(VideoCard, line);
	}
getch();
}

void DisplayLine(struct Video VideoCard[20], int i, int *k){
	if(*k == 0){
		printf("\n──────────────────────────────────────────────\n"
			"|CompanyName|ReleaseYear|CardName|NumberModel|\n"
			"────────────┴───────────┴────────┴────────────\n");
		*k = 1;
	}
	printf("|%11s|%-11d|%-8s|%11d|\n", VideoCard[i].CompanyName, VideoCard[i].ReleaseYear, VideoCard[i].CardName, VideoCard[i].NumberModel);
	printf("────────────┴───────────┴────────┴────────────\n");
}

void SortInfo(struct Video VideoCard[20], int line)
{
	int point, i, j;
	system("cls");
	printf("->[8]SORT\n"
		   "  [0]EXIT\n"
		   "\nSELECT_A_CATEGORY\n"
		   "[1]Company Name\n"
		   "[2]Release Year\n"
		   "[3]Card Name\n"
		   "[4]Number Model\n"
		   ">");
	point = getch();
	system("cls");
	printf("SORT_BY \n");
	switch(point)
	{
		case '0':
			Menu(line);
			break;
		case '1':
			printf("[1]Company Name\n");
			break;
		case '2':
			printf("[2]Release Year\n");
			break;
		case '3':
			printf("[3]Card Name\n");
			break;
		case '4':
			printf("[4]Number Model\n");
			break;
	}
	printf("\n->SORTING_METHOD\n"
		   "\nSELECT_A_CATEGORY\n"
		   "[1]INCREASE\n"
		   "[2]DECREASE\n"
		   ">");
	switch(point)
	{
		case '1':
		{
				point = getch();
				system("cls");
				switch(point)
				{
					case '1':
					{
						for (i = line - 1; i > 0; i--)
							for (j = 0; j < i; j++)
							{
							if(strcmp(VideoCard[j].CompanyName, VideoCard[j+1].CompanyName) > 0)
							BubbleSort(VideoCard, j);
							}
					}
					break;
					case '2':
					{
						for (i = line - 1; i > 0; i--)
							for (j = 0; j < i; j++)
							{
							if(strcmp(VideoCard[j].CompanyName, VideoCard[j+1].CompanyName) < 0)
							BubbleSort(VideoCard, j);
							}
					}
					break;
				}
		}
				break;
		case '2':
		{
				point = getch();
				system("cls");
				switch(point)
				{
					case '1':
					{
					for (i = line - 1; i > 0; i--)
						for (j = 0; j < i; j++)
						{
						if(VideoCard[j].ReleaseYear > VideoCard[j+1].ReleaseYear)
						BubbleSort(VideoCard, j);
						}
					}
					break;
					case '2':
					{
					for (i = line - 1; i > 0; i--)
						for (j = 0; j < i; j++)
						{
						if(VideoCard[j].ReleaseYear < VideoCard[j+1].ReleaseYear)
						BubbleSort(VideoCard, j);
						}
					}
					break;
				}
		}
				break;
		case '3':
		{
				point = getch();
				system("cls");
				switch(point)
				{
					case '1':
					{
					for (i = line - 1; i > 0; i--)
						for (j = 0; j < i; j++)
						{
						if(strcmp(VideoCard[j].CardName, VideoCard[j+1].CardName) > 0)
						BubbleSort(VideoCard, j);
						}
					}
					break;
					case '2':
					{
					for (i = line - 1; i > 0; i--)
						for (j = 0; j < i; j++)
						{
						if(strcmp(VideoCard[j].CardName, VideoCard[j+1].CardName) < 0)
						BubbleSort(VideoCard, j);
						}
					}
					break;
				}
		}
				break;
		case '4':
		{
				point = getch();
				system("cls");
				switch(point)
				{
					case '1':
					{
					for (i = line - 1; i > 0; i--)
						for (j = 0; j < i; j++)
						{
						if(VideoCard[j].NumberModel > VideoCard[j+1].NumberModel)
						BubbleSort(VideoCard, j);
						}
					}
					break;
					case '2':
					{
					for (i = line - 1; i > 0; i--)
						for (j = 0; j < i; j++)
						{
						if(VideoCard[j].NumberModel < VideoCard[j+1].NumberModel)
						BubbleSort(VideoCard, j);}
					}
					break;
				}
				break;
		}
	}
	PrintArray(line, VideoCard);
}

void BubbleSort(struct Video VideoCard[20], int j)
{
	struct Video Temp = VideoCard[j];
	VideoCard[j] = VideoCard[j+1];
	VideoCard[j+1] = Temp;
}
